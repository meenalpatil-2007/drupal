<?php
/**
 * @file
 * Support for m2serve web services connector.
 */

define('M2SERVE_CONNECTOR_ENDPOINT_NAME', 'm2serve');
/**
 * Implements hook_form_alter().
 *
 * This function adds a service request type method and curl example for
 * this service request to form
 */
function m2serve_connector_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'ctools_export_ui_edit_item_form' && $form['endpoint_object']['#value']->name == 'm2serve') {
    $form['server']['#disabled'] = TRUE;
    $form['path']['#disabled'] = TRUE;
    $form['authentication']['#disabled'] = TRUE;
  }

  if ($form_id == 'services_edit_form_endpoint_resources' && arg(2) == 'm2serve-connector') {
    // Get all resources of m2serve web service.
    $resources = services_get_resources(M2SERVE_CONNECTOR_ENDPOINT_NAME);

    foreach ($resources as $resource_name => $res) {
      foreach ($res as $key => $value) {
        if ($key == "endpoint") {
          continue;
        }

        $request_type = "";
        $url = "";

        $args = array();
        $command = 'curl -H "Accept: application/json" --include --request %s --cookie %s ';
        switch ($key) {
          case "actions":
            $request_type = "POST";
            break;
        }

        if (is_array($value)) {
          foreach ($value as $k => $v) {
            $cookie = '' . session_name() . '=' . session_id() . '';
            $url = url('m2serve/' . $resource_name . "/" . $k, array('absolute' => TRUE));

            switch ($k) {
              case "index":
              case "retrieve":
                $request_type = "GET";
                break;

              case "operations":
              case "actions":
              case "create":
                $request_type = "POST";
                $url = url('m2serve/' . $resource_name, array('absolute' => TRUE));
                break;

              case  "update":
                $request_type = "PUT";
                break;

              case "delete":
                $request_type = "DELETE";
                break;

              case "login":
                $cookie = "";
                break;
            }
            $form['resources'][$resource_name][$key][$k]["#request"] = array(
              '#type' => 'value',
              '#type' => $request_type,
              "#args" => $args,
              '#value' => sprintf($command . $url, $request_type, $cookie),
            );
          }
        }
      }
    }
    $form['resources']['#theme'] = 'm2serve_services_resource_table';
  }
}

/**
 * Implements hook_menu().
 *
 * This is the m2serve_connector Config Menu.
 */
function m2serve_connector_menu() {
  $items['admin/structure/m2serve-connector'] = array(
    'title' => 'M2serve connector configuration',
    'description' => "M2serve connector configuration",
    'page callback' => 'services_edit_endpoint_resources',
    'page arguments' => array(M2SERVE_CONNECTOR_ENDPOINT_NAME),
    'access arguments' => array('administer m2serve connector'),
    'file' => 'services_ctools_export_ui.class.php',
    'file path' => drupal_get_path("module", "services") . "/plugins/export_ui",
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/**
 * Implements hook_permissions().
 */
function m2serve_connector_permission() {
  return array(
    'administer m2serve connector' => array(
      'title' => t('Administer m2serve connector'),
      'description' => t('Perform administration tasks for m2serve connector.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function m2serve_connector_theme() {
  return array(
    'm2serve_services_resource_table' => array(
      'render element' => 'table',
      'file' => 'm2serve_connector.admin.inc',
    ),
  );
}


/**
 * Implements hook_services_resources().
 */
function m2serve_connector_services_resources() {
  $resources = array(
    'm2serve_res' => array(
      'actions' => array(
        'services_list' => array(
          'help' => 'Get services list',
          'file' => array(
            'type' => 'inc',
            'module' => 'm2serve_connector',
            'name' => 'resources/m2serve_connector_resource',
          ),
          'callback' => '_m2serve_connector_resource_services_list',
          'access callback' => '_m2serve_connector_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'profile2_list' => array(
          'help' => 'Get profile2 type list',
          'file' => array(
            'type' => 'inc',
            'module' => 'm2serve_connector',
            'name' => 'resources/m2serve_connector_resource',
          ),
          'callback' => '_m2serve_connector_resource_profile2_list',
          'access callback' => '_m2serve_connector_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'content_type_list' => array(
          'help' => 'Get content type list',
          'file' => array(
            'type' => 'inc',
            'module' => 'm2serve_connector',
            'name' => 'resources/m2serve_connector_resource',
          ),
          'callback' => '_m2serve_connector_resource_content_type_list',
          'access callback' => '_m2serve_connector_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'm2serve_node' => array(
      'operations' => array(
        'retrieve' => array(
          'file' => array(
            'type' => 'inc',
            'module' => 'm2serve_connector',
            'name' => 'resources/m2serve_connector_resource',
          ),
          'callback' => '_m2serve_connector_node_resource_retrieve',
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the node to get',
            ),
          ),
          'access callback' => '_node_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );

  return $resources;
}

/**
 * Create a new endpoint 'm2serve' with defaults appropriately set from schema.
 *
 * @return object
 *   An endpoint initialized with the default values.
 */
function m2serve_connector_default_endpoint() {
  $endpoint = new stdClass();
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->api_version = 3;
  $endpoint->name = 'm2serve';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'm2serve';
  $endpoint->authentication = array(
    'services' => 'services',
  );
  $endpoint->server_settings = array(
    'formatters' => array(
      'json' => TRUE,
      'xml' => TRUE,
      'bencode' => FALSE,
      'ical' => FALSE,
      'jsonp' => FALSE,
      'php' => FALSE,
      'rss' => FALSE,
      'xcal' => FALSE,
      'yaml' => FALSE,
    ),
    'parsers' => array(
      'application/json' => TRUE,
      'application/x-www-form-urlencoded' => TRUE,
      'application/xml' => TRUE,
      'multipart/form-data' => TRUE,
      'text/xml' => TRUE,
      'application/vnd.php.serialized' => FALSE,
      'application/x-yaml' => FALSE,
    ),
  );
  $endpoint->resources = array(
    'm2serve_res' => array(
      'actions' => array(
        'services_list' => array(
          'enabled' => '1',
        ),
        'profile2_list' => array(
          'enabled' => '1',
        ),
        'content_type_list' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'm2serve_node' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'proxy' => array(
      'actions' => array(
        'callapi' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupal_info' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'module_list' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'views_list' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'profile' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'comment' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'countAll' => array(
          'enabled' => '1',
        ),
        'countNew' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'file' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'create_raw' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'node' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'relationships' => array(
        'files' => array(
          'enabled' => '1',
        ),
        'comments' => array(
          'enabled' => '1',
        ),
      ),
      'targeted_actions' => array(
        'attach_file' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'system' => array(
      'actions' => array(
        'connect' => array(
          'enabled' => '1',
        ),
        'get_variable' => array(
          'enabled' => '1',
        ),
        'set_variable' => array(
          'enabled' => '1',
        ),
        'del_variable' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'user' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'login' => array(
          'enabled' => '1',
        ),
        'logout' => array(
          'enabled' => '1',
          'settings' => array(
            'services' => array(
              'resource_api_version' => '1.0',
            ),
          ),
        ),
        'register' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'search_api' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'views' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'votingapi' => array(
      'actions' => array(
        'setVote' => array(
          'enabled' => '1',
        ),
        'unsetVote' => array(
          'enabled' => '1',
        ),
        'getUserVotes' => array(
          'enabled' => '1',
        ),
        'getContentVotes' => array(
          'enabled' => '1',
        ),
        'getVotingResults' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'options' => array(
      'operations' => array(
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'fields' => array(
      'operations' => array(
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'meta' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'content-by-user' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'field-instance-file' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
      ),
    ),
  );
  $endpoint->debug = 0;
  return $endpoint;
}

/**
 * Determine service request type method form give resource opretions.
 *
 * @param string $op
 *   services resource operation type
 *
 * @param string $default
 *   Default service type. POST
 *
 * @return string
 *   service calling method
 */
function m2serve_connector_get_request_type($op, $default = 'POST') {
  switch ($op) {
    case "index":
    case "retrieve":
      $request_type = "GET";
      break;

    case "operations":
    case "login":
    case "actions":
    case "create":
      $request_type = "POST";
      break;

    case  "update":
      $request_type = "PUT";
      break;

    case "delete":
      $request_type = "DELETE";
      break;

    default:
      $request_type = $default;
  }
  return $request_type;
}


/**
 * Implements hook_mast_field_types().
 */
function m2serve_connector_mast_field_types() {
  return array(
    'field_collection',
    'node_reference',
    'entityreference',
  );
}
/**
 * Implements hook_mast_classes().
 */
function m2serve_connector_mast_classes() {
  return array(
    'files' => array(
      drupal_get_path('module', 'm2serve_connector') . '/m2serve_connector.mast.inc',
    ),
    'entities' => array(
      'node' => 'mastEntityStructureNode',
      'field_collection_item' => 'M2serveConnectorMastEntityStructureCollectionNode',
    ),
    'field_types' => array(
      'field_collection' => 'M2serveConnectorMastFieldCollectionField',
      'node_reference' => 'M2serveConnectorMastNodeReferenceField',
      'entityreference' => 'M2serveConnectorMastEntityReferenceField',
    ),
  );
}

/**
 * Implements hook_node_load().
 */
function m2serve_connector_node_load($nodes, $types) {
  // Scan each node that has been loaded.
  foreach ($nodes as $node_id => $node) {
    // Get field information of loaded node.
    $node_fields = field_info_instances("node", $node->type);
    // Scan each field type of loaded node.
    foreach ($node_fields as $field_name => $field) {
      // Use mast function to get detail information of field type.
      $mast_field_info_field = mast_field_info_field($field_name);
      // Check for field type.
      switch ($mast_field_info_field['type']) {
        case 'image':
          if ($node->{$field_name} && array_key_exists($node->language, $node->{$field_name})) {
            // For each image field type result get file url form file uri.
            foreach ($node->{$field_name}[$node->language] as $key => $file) {
              // Update result.
              if ($file['uri']) {
                $nodes[$node_id]->{$field_name}[$node->language][$key]['url'] = file_create_url($file['uri']);
              }
            }
          }
          elseif ($node->{$field_name} && array_key_exists('und', $node->{$field_name})) {
            // For each image field type result get file url form file uri.
            foreach ($node->{$field_name}['und'] as $key => $file) {
              // Update result.
              if ($file['uri']) {
                $nodes[$node_id]->{$field_name}['und'][$key]['url'] = file_create_url($file['uri']);
              }
            }
          }
          break;

        case 'field_collection':
          if ($node->{$field_name} && $node->{$field_name}[$node->language]) {
            foreach ($node->{$field_name}[$node->language] as $field_collection_key => $field_collection_value) {
              $field_collection_item = field_collection_item_load($field_collection_value['value']);
              $mast_structure = mastFactory::createEntityStructure("field_collection_item", $field_name);
              foreach ($mast_structure->getAllFields() as $item_field_name => $item_value) {
                $node->{$field_name}[$node->language][$field_collection_key][$item_field_name] = $field_collection_item->{$item_field_name};
              }
            }
          }
          break;

        default:
      }
    }
  }
}
